" Required for wilder and mason
Plug 'ryanoasis/vim-devicons', Cond($TERM != 'linux')

if has('nvim')
  function! UpdateRemotePlugins(...)
    " Needed to refresh runtime files
    let &rtp=&rtp
    UpdateRemotePlugins
  endfunction

  Plug 'romgrk/fzy-lua-native'
  Plug 'gelguy/wilder.nvim', { 'do': function('UpdateRemotePlugins') }
endif

Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}

Plug 'jamessan/vim-gnupg'

Plug 'editorconfig/editorconfig-vim'
Plug 'embear/vim-localvimrc'

Plug 'airblade/vim-rooter'

Plug 'preservim/vim-markdown', {'for': 'markdown'}
Plug 'lvht/tagbar-markdown', {'for': 'markdown'}
Plug 'habamax/vim-asciidoctor', {'for': 'asciidoc'}

Plug 'tpope/vim-ragtag'

Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

Plug 'tpope/vim-speeddating'
Plug 'mattn/calendar-vim'

Plug 'vim-scripts/loremipsum', {'on': 'Loremipsum'}


function PluginsConfigMidi()
    let g:localvimrc_persistent = 1

    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

    "augroup pencil
      "au!
      "au FileType markdown,mkd call pencil#init()
      "au FileType text         call pencil#init()
      "au FileType mail         call pencil#init()
      "au FileType tex          call pencil#init()
    "augroup END

    let g:vim_markdown_frontmatter=1
    let g:vim_markdown_math=1

    au FileType markdown call RagtagInit()

    " Allow for reflow of bullet paragraphs
    let g:vim_markdown_auto_insert_bullets = 0

    let g:calendar_monday = 1

    if has('nvim')
        lua <<EOF
            local wilder = require('wilder')
            wilder.setup({modes = {':', '/', '?'}})

            wilder.set_option('pipeline', {
              wilder.branch(
                wilder.python_file_finder_pipeline({
                  debounce = 100,
                  file_command = function(ctx, arg)
                    -- If search pattern contains "." also search of hidden
                    -- files. Otherwise, do not.
                    if string.find(arg, '.') ~= nil then
                      return {'fd', '-tf', '-H'}
                    else
                      return {'fd', '-tf'}
                    end
                  end,
                  dir_command = {'fd', '-td'},
                }),
                wilder.substitute_pipeline({
                  debounce = 50,
                  pipeline = wilder.python_search_pipeline({
                    skip_cmdtype_check = 1,
                    pattern = wilder.python_fuzzy_pattern({
                      start_at_boundary = 0,
                    }),
                  }),
                }),
                wilder.cmdline_pipeline({
                  debounce = 50,
                  fuzzy = 2,
                  fuzzy_filter = wilder.lua_fzy_filter(),
                }),
                {
                  wilder.check(function(ctx, x) return x == '' end),
                  wilder.history(),
                },
                wilder.python_search_pipeline({
                  debounce = 50,
                  pattern = wilder.python_fuzzy_pattern({
                    start_at_boundary = 0,
                  }),
                })
              ),
            })

            local highlighters = {
              -- wilder.pcre2_highlighter(),
              wilder.lua_fzy_highlighter(),
            }

            local popupmenu_renderer = wilder.popupmenu_renderer(
              wilder.popupmenu_border_theme({
                border = 'rounded',
                ellipsis = '…',
                empty_message = wilder.popupmenu_empty_message_with_spinner(),
                highlighter = highlighters,
                left = {
                  ' ',
                  wilder.popupmenu_devicons(),
                  wilder.popupmenu_buffer_flags({
                    flags = '%a-+',
                  }),
                },
                right = {
                  ' ',
                  wilder.popupmenu_scrollbar(),
                },
              })
            )

            local wildmenu_renderer = wilder.wildmenu_renderer({
              highlighter = highlighters,
              separator = ' · ',
              left = {' ', wilder.wildmenu_spinner(), ' '},
              right = {' ', wilder.wildmenu_index()},
            })

            wilder.set_option('renderer', wilder.renderer_mux({
              [':'] = popupmenu_renderer,
              ['/'] = wildmenu_renderer,
              substitute = wildmenu_renderer,
            }))
EOF
    endif
endfunction

" vim:ft=vim
