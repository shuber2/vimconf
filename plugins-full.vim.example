" java extension to deoplete
Plug 'artur-shaik/vim-javacomplete2', {'for': 'java'}

Plug 'neomake/neomake'
Plug 'puremourning/vimspector'

Plug 'kana/vim-operator-user'
Plug 'rhysd/vim-clang-format'
Plug 'justmao945/vim-clang', {'for': ['c', 'cpp', 'objc']}

" Prevent slow foling update, e.g., for vimtex
Plug 'Konfekt/FastFold'
Plug 'lervag/vimtex'

Plug 'shuber2/vim-syntax-easychair2'

Plug 'gko/vim-coloresque'

Plug 'vimwiki/vimwiki'
Plug 'jceb/vim-orgmode', {'for': ['org']}

Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}
Plug 'hail2u/vim-css3-syntax', {'for': ['scss', 'css']}

Plug 'https://gitlab.com/dbeniamine/vim-mail'
Plug 'Konfekt/vim-DetectSpellLang', {'do': 'spell'}
Plug 'dpelle/vim-LanguageTool'

" Disable devicons on linux terminal
if $TERM == 'linux'
    let g:enable_plugin_devicons=0
    " Enable loading of devicons on all others
else
    let g:enable_plugin_devicons=1
endif

Plug 'ryanoasis/vim-devicons', Cond(g:enable_plugin_devicons)

Plug 'joom/latex-unicoder.vim'
Plug 'chrisbra/unicode.vim'

Plug 'sjl/splice.vim', {'on': 'SpliceInit'}

" Costs a second startup time
Plug 'dbeniamine/cheat.sh-vim', {'on': 'Cheat'}

Plug 'sheerun/vim-polyglot'

" neovim-0.4 has troubles with nvim-treesitter
if has('nvim-0.5')
    " neovim-0.7 works until v0.8.0
    if has('nvim-0.9')
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    else
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'tag': 'v0.8.0'}
    endif

    Plug 'nvim-treesitter/nvim-treesitter-refactor', {'do': ':TSUpdate'}
endif

function PluginsConfigFull()
    let g:neomake_c_enabled_makers = ['clangtidy', 'clangcheck']
    let g:neomake_cpp_enabled_makers = ['clangtidy', 'clangcheck']
    let g:clang_compilation_database = '.'

    " Taken from neomake
    if OnBattery()
        call neomake#configure#automake('w')
    else
        call neomake#configure#automake('nw', 1000)
    endif


    if has('nvim-0.5')
        set foldexpr=nvim_treesitter#foldexpr()

    lua <<EOF
        require'nvim-treesitter.configs'.setup {
            -- one of "all"
            ensure_installed = "all",
            -- List of parsers to ignore installing
            ignore_install = {},
            -- Modules and its options go here
            highlight = { enable = true },
            -- Indentation is still quite buggy, e.g., for multi-line C comments
            -- or for comments right after a preproc definition.
            -- indent = { enable = true },
            textobjects = { enable = true },
            incremental_selection = {
                enable = true,
                keymaps = {
                    init_selection = "gnn",
                    node_incremental = "grn",
                    scope_incremental = "grc",
                    node_decremental = "grm",
                },
            },
            refactor = {
                highlight_definitions = { enable = true },
                smart_rename = {
                    enable = true,
                    keymaps = { smart_rename = "grr" },
                    },
                navigation = {
                    enable = true,
                    keymaps = {
                        goto_definition = "gnd",
                        list_definitions = "gnD",
                        list_definitions_toc = "gO",
                        goto_next_usage = "<a-*>",
                        goto_previous_usage = "<a-#>",
                    },
                },
            },
        }
EOF
    endif

    let g:fastfold_minlines = 0

    let g:detectspelllang_langs = {}
    let g:detectspelllang_langs.aspell =[ 'en_US', 'de_AT']

    " Try finding jar file. If it does not work, set cmd directly
    let g:languagetool_jar='/snap/languagetool/current/usr/bin/languagetool-commandline.jar'
    if !filereadable(g:languagetool_jar)
        unlet! g:languagetool_jar
        let g:languagetool_cmd='languagetool'
    endif


    au FileType mail let g:VimMailSpellLangs=['de', 'en']
    let g:VimMailContactsProvider=['khard']
    let g:VimMailContactsCommands={
                \'khard':
                \{ 'query' : "khard email --parsable --search-in-source-files",
                \'sync': "/bin/true"}
                \}

    let g:org_todo_keywords = [['TODO(t)', 'WAITING(w)', '|', 'DONE(d)'],
                \ ['|', 'OBSOLETE(o)', 'WONT(n)'],
                \ ['CANCELED(c)']]

    let g:vimwiki_list = [{'path': '~/.vimwiki/',
                \ 'template_path': '~/.vim/vimwiki/templates',
                \ 'template_default': 'default',
                \ 'template_ext': '.html'}]
    let g:vimwiki_global_ext = 0


    " Java completion
    au FileType java setlocal omnifunc=javacomplete#Complete
    au FileType java JCEnable

    let g:vimtex_fold_enabled = 1
    let g:vimtex_fold_levelmarker = 'âžœ'
    let g:vimtex_view_general_viewer = 'okular'
    let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
    let g:airline#extensions#vimtex#enabled = 1

    au FileType c,cpp,objc,java,python packadd! vimspector
    let g:vimspector_base_dir = expand('~/.vim/vimspector-config')
    let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools' ]
    "let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

    function VimspectorRestartOrCreateConfig()
        if !filereadable('.vimspector.json')
            echo "Missing .vimspector.json, created one."
            execute 'tabe .vimspector.json'
        else
            call vimspector#Restart()
        endif
    endfunction

    nmap <leader>dc  <Plug>VimspectorContinue
    nmap <leader>ds  <Plug>VimspectorStop
    nmap <leader>dr  :call VimspectorRestartOrCreateConfig()<CR>
    "nmap <leader>dr  :call vimspector#Restart()<CR>
    nmap <leader>drr :call vimspector#Reset()<CR>
    nmap <leader>dp  <Plug>VimspectorPause
    nmap <leader>db  <Plug>VimspectorToggleBreakpoint
    nmap <leader>dcb <Plug>VimspectorToggleConditionalBreakpoint
    nmap <leader>dfb <Plug>VimspectorAddFunctionBreakpoint
    nmap <leader>dtc <Plug>VimspectorRunToCursor
    nmap <leader>do  <Plug>VimspectorStepOver
    nmap <leader>di  <Plug>VimspectorStepInto
    nmap <leader>dof <Plug>VimspectorStepOut
    " for normal mode, the word under the cursor
    nmap <Leader>de  <Plug>VimspectorBalloonEval
    " for visual mode, the visually selected text
    xmap <Leader>de  <Plug>VimspectorBalloonEval

    au BufNewFile .vimspector.json read ~/.vim/vimspector-config/vimspector.json

    " Do not show diagnostic window of vim-clang
    let g:clang_diagsopt = ''

    augroup ClangFormatSettings
        au!
        au FileType c,cpp,objc,javascript,java,typescript,protobuf,cuda,vala
                    \ vmap <buffer><leader>cf <Plug>(operator-clang-format)
        au FileType c,cpp,objc,javascript,java,typescript,protobuf,cuda,vala
                    \ nmap <buffer><leader>cf :ClangFormat<CR>
    augroup END
endfunction
