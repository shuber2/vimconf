" neovim-0.4 has troubles with nvim-treesitter
if has('nvim-0.5')
    " neovim-0.7 works until v0.8.0
    if has('nvim-0.9')
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    else
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'tag': 'v0.8.0'}
    endif

    Plug 'nvim-treesitter/nvim-treesitter-refactor', {'do': ':TSUpdate'}
endif

if has('nvim-0.7')
    Plug 'williamboman/mason.nvim'
    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'mfussenegger/nvim-lint'
    Plug 'mhartington/formatter.nvim'
endif


" Prevent slow foling update, e.g., for vimtex
Plug 'Konfekt/FastFold'

Plug 'gko/vim-coloresque'

Plug 'puremourning/vimspector'

Plug 'Konfekt/vim-DetectSpellLang', {'do': 'spell'}

Plug 'dpelle/vim-LanguageTool'

Plug 'ryanoasis/vim-devicons', Cond($TERM != 'linux')

Plug 'joom/latex-unicoder.vim'
Plug 'chrisbra/unicode.vim'

Plug 'sjl/splice.vim', {'on': 'SpliceInit'}

" Costs a second startup time
Plug 'dbeniamine/cheat.sh-vim', {'on': 'Cheat'}

Plug 'sheerun/vim-polyglot'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileType specific plugins

" Java IDE:
" https://sookocheff.com/post/vim/neovim-java-ide/

Plug 'lervag/vimtex'

Plug 'shuber2/vim-syntax-easychair2'

Plug 'vimwiki/vimwiki'

Plug 'jceb/vim-orgmode', {'for': ['org']}

Plug 'https://gitlab.com/dbeniamine/vim-mail'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function PluginsConfigFull()

    if has('nvim-0.5')
        set foldexpr=nvim_treesitter#foldexpr()

        lua <<EOF
            require'nvim-treesitter.configs'.setup {
                -- one of "all"
                ensure_installed = "all",
                -- List of parsers to ignore installing
                ignore_install = {},
                -- Modules and its options go here
                highlight = { enable = true },
                -- Indentation is still quite buggy, e.g., for multi-line C comments
                -- or for comments right after a preproc definition.
                -- indent = { enable = true },
                textobjects = { enable = true },
                incremental_selection = {
                    enable = true,
                    keymaps = {
                        init_selection = "gnn",
                        node_incremental = "grn",
                        scope_incremental = "grc",
                        node_decremental = "grm",
                    },
                },
                refactor = {
                    highlight_definitions = { enable = true },
                    smart_rename = {
                        enable = true,
                        keymaps = { smart_rename = "grr" },
                        },
                    navigation = {
                        enable = true,
                        keymaps = {
                            goto_definition = "gnd",
                            list_definitions = "gnD",
                            list_definitions_toc = "gO",
                            goto_next_usage = "<a-*>",
                            goto_previous_usage = "<a-#>",
                        },
                    },
                },
            }
EOF
    endif

    if has('nvim-0.7')
        lua <<EOF
            require("mason").setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "➜",
                        package_uninstalled = "✗"
                    }
                }
            })
            require("mason-lspconfig").setup()
            require("mason-lspconfig").setup({
                ensure_installed = {
                    -- Latest before switching to Java 18
                    -- "java_language_server@94a684b3931661440a57738fb2ee23d579acc2ab",
                    "bashls",
                    "clangd",
                    "cssls",
                    "html",
                    "jdtls",
                    "lua_ls",
                    "markdown_oxide",
                    "pylsp",
                    "texlab",
                    "vimls",
                }
            })

            require("mason-lspconfig").setup_handlers {
                -- The first entry (without a key) will be the default handler
                -- and will be called for each installed server that doesn't have
                -- a dedicated handler.
                function (server_name) -- default handler (optional)
                    require("lspconfig")[server_name].setup {}
                end,
                -- Next, you can provide a dedicated handler for specific servers.
                -- For example, a handler override for the `rust_analyzer`:
                -- ["rust_analyzer"] = function ()
                --     require("rust-tools").setup {}
                -- end
            }
EOF
        " A gK mapping for hover. The default 'K' is already mapped to :Map
        nmap <silent> gK :lua vim.lsp.buf.hover()<cr>

    endif

    let g:fastfold_minlines = 0

    let g:detectspelllang_langs = {}
    let g:detectspelllang_langs.aspell =[ 'en_US', 'de_AT']

    " Try finding jar file. If it does not work, set cmd directly
    let g:languagetool_jar='/snap/languagetool/current/usr/bin/languagetool-commandline.jar'
    if !filereadable(g:languagetool_jar)
        unlet! g:languagetool_jar
        let g:languagetool_cmd='languagetool'
    endif


    au FileType mail let g:VimMailSpellLangs=['de', 'en']
    let g:VimMailContactsProvider=['khard']
    let g:VimMailContactsCommands={
                \'khard':
                \{ 'query' : "khard email --parsable --search-in-source-files",
                \'sync': "/bin/true"}
                \}

    let g:org_todo_keywords = [['TODO(t)', 'WAITING(w)', '|', 'DONE(d)'],
                \ ['|', 'OBSOLETE(o)', 'WONT(n)'],
                \ ['CANCELED(c)']]

    let g:vimwiki_list = [{'path': '~/.vimwiki/',
                \ 'template_path': '~/.vim/vimwiki/templates',
                \ 'template_default': 'default',
                \ 'template_ext': '.html'}]
    let g:vimwiki_global_ext = 0

    let g:vimtex_fold_enabled = 1
    let g:vimtex_fold_levelmarker = '➜'
    let g:vimtex_view_general_viewer = 'okular'
    let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
    let g:airline#extensions#vimtex#enabled = 1

    au FileType c,cpp,objc,java,python packadd! vimspector
    let g:vimspector_base_dir = expand('~/.vim/vimspector-config')
    let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools' ]
    "let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

    function VimspectorRestartOrCreateConfig()
        if !filereadable('.vimspector.json')
            echo "Missing .vimspector.json, created one."
            execute 'tabe .vimspector.json'
        else
            call vimspector#Restart()
        endif
    endfunction

    nmap <leader>dc  <Plug>VimspectorContinue
    nmap <leader>ds  <Plug>VimspectorStop
    nmap <leader>dr  :call VimspectorRestartOrCreateConfig()<CR>
    "nmap <leader>dr  :call vimspector#Restart()<CR>
    nmap <leader>drr :call vimspector#Reset()<CR>
    nmap <leader>dp  <Plug>VimspectorPause
    nmap <leader>db  <Plug>VimspectorToggleBreakpoint
    nmap <leader>dcb <Plug>VimspectorToggleConditionalBreakpoint
    nmap <leader>dfb <Plug>VimspectorAddFunctionBreakpoint
    nmap <leader>dtc <Plug>VimspectorRunToCursor
    nmap <leader>do  <Plug>VimspectorStepOver
    nmap <leader>di  <Plug>VimspectorStepInto
    nmap <leader>dof <Plug>VimspectorStepOut
    " for normal mode, the word under the cursor
    nmap <Leader>de  <Plug>VimspectorBalloonEval
    " for visual mode, the visually selected text
    xmap <Leader>de  <Plug>VimspectorBalloonEval

    au BufNewFile .vimspector.json read ~/.vim/vimspector-config/vimspector.json
endfunction

" vim:ft=vim
